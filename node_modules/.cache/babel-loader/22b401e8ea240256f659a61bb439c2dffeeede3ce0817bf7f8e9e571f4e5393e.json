{"ast":null,"code":"import _objectSpread from \"C:/Users/Dell/WebstormProjects/StarpenzuWeb/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/Dell/WebstormProjects/StarpenzuWeb/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"disabled\", \"label\", \"slotProps\", \"slots\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMenuItemUtilityClass } from './menuItemClasses';\nimport useMenuItem from '../useMenuItem';\nimport composeClasses from '../composeClasses';\nimport useSlotProps from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  var disabled = ownerState.disabled,\n    focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/base/react-menu/components-api/#menu-item)\n */\nvar MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n  var children = props.children,\n    _props$disabled = props.disabled,\n    disabledProp = _props$disabled === void 0 ? false : _props$disabled,\n    label = props.label,\n    _props$slotProps = props.slotProps,\n    slotProps = _props$slotProps === void 0 ? {} : _props$slotProps,\n    _props$slots = props.slots,\n    slots = _props$slots === void 0 ? {} : _props$slots,\n    other = _objectWithoutProperties(props, _excluded);\n  var _useMenuItem = useMenuItem({\n      disabled: disabledProp,\n      rootRef: forwardedRef,\n      label: label\n    }),\n    getRootProps = _useMenuItem.getRootProps,\n    disabled = _useMenuItem.disabled,\n    focusVisible = _useMenuItem.focusVisible,\n    highlighted = _useMenuItem.highlighted;\n  var ownerState = _objectSpread(_objectSpread({}, props), {}, {\n    disabled: disabled,\n    focusVisible: focusVisible,\n    highlighted: highlighted\n  });\n  var classes = useUtilityClasses(ownerState);\n  var Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  var rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState: ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, _objectSpread(_objectSpread({}, rootProps), {}, {\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default MenuItem;","map":{"version":3,"names":["React","PropTypes","getMenuItemUtilityClass","useMenuItem","composeClasses","useSlotProps","useClassNamesOverride","jsx","_jsx","useUtilityClasses","ownerState","disabled","focusVisible","slots","root","MenuItem","forwardRef","props","forwardedRef","_slots$root","children","_props$disabled","disabledProp","label","_props$slotProps","slotProps","_props$slots","other","_objectWithoutProperties","_excluded","_useMenuItem","rootRef","getRootProps","highlighted","_objectSpread","classes","Root","rootProps","elementType","getSlotProps","externalSlotProps","externalForwardedProps","className","process","env","NODE_ENV","propTypes","node","bool","string","shape","oneOfType","func","object"],"sources":["C:/Users/Dell/WebstormProjects/StarpenzuWeb/node_modules/@mui/base/MenuItem/MenuItem.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { getMenuItemUtilityClass } from './menuItemClasses';\nimport useMenuItem from '../useMenuItem';\nimport composeClasses from '../composeClasses';\nimport useSlotProps from '../utils/useSlotProps';\nimport { useClassNamesOverride } from '../utils/ClassNameConfigurator';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction useUtilityClasses(ownerState) {\n  const {\n    disabled,\n    focusVisible\n  } = ownerState;\n  const slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, useClassNamesOverride(getMenuItemUtilityClass));\n}\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/base/react-menu/components-api/#menu-item)\n */\nconst MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, forwardedRef) {\n  var _slots$root;\n  const {\n    children,\n    disabled: disabledProp = false,\n    label,\n    slotProps = {},\n    slots = {},\n    ...other\n  } = props;\n  const {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted\n  } = useMenuItem({\n    disabled: disabledProp,\n    rootRef: forwardedRef,\n    label\n  });\n  const ownerState = {\n    ...props,\n    disabled,\n    focusVisible,\n    highlighted\n  };\n  const classes = useUtilityClasses(ownerState);\n  const Root = (_slots$root = slots.root) != null ? _slots$root : 'li';\n  const rootProps = useSlotProps({\n    elementType: Root,\n    getSlotProps: getRootProps,\n    externalSlotProps: slotProps.root,\n    externalForwardedProps: other,\n    className: classes.root,\n    ownerState\n  });\n  return /*#__PURE__*/_jsx(Root, {\n    ...rootProps,\n    children: children\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n  /**\n   * A text representation of the menu item's content.\n   * Used for keyboard text navigation matching.\n   */\n  label: PropTypes.string,\n  /**\n   * The props used for each slot inside the MenuItem.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside the MenuItem.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    root: PropTypes.elementType\n  })\n} : void 0;\nexport default MenuItem;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}